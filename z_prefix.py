# Зчитуємо довжину рядка та префікс-функцію втраченої строки
n = int(input())
pi = list(map(int, input().split()))  # Префікс-функція для відновлення рядка

# Починаємо відновлення рядка: перший символ — 'a'
s = ['a']
next_char = ord('b')  # Наступний символ, який можна використати, якщо потрібно новий

# Відновлюємо рядок символ за символом на основі префікс-функції
for i in range(1, n):
    if pi[i] > 0:
        # Якщо префікс-функція pi[i] > 0, то символ співпадає з попереднім префіксом
        if pi[i] - 1 < len(s):
            s.append(s[pi[i] - 1])
        else:
            # Якщо індекс виходить за межі — додаємо 'a' як запасний варіант
            s.append('a')
    else:
        # Якщо префікс-функція дорівнює 0 — додаємо новий символ, не вжитий до цього
        while chr(next_char) in s:
            next_char += 1
        s.append(chr(next_char))

# Обчислюємо Z-функцію для відновленого рядка
z = [0] * n
l, r = 0, 0  # Поточні межі Z-блоку

for i in range(1, n):
    if i <= r:
        # Всередині вже обчисленого Z-блоку — використовуємо раніше обчислені значення
        z[i] = min(r - i + 1, z[i - l])
    # Розширюємо збіг символів праворуч
    while i + z[i] < n and s[z[i]] == s[i + z[i]]:
        z[i] += 1
    # Оновлюємо межі Z-блоку, якщо новий виходить далі
    if i + z[i] - 1 > r:
        l, r = i, i + z[i] - 1

# Виводимо Z-функцію
print(*z)
